var search_data = {"index":{"searchIndex":["arbacverifier","object","apply_role_assignment()","apply_role_revocation()","backward_slicing()","compute_reachability()","forward_slicing()","parse_arbac_file()","readme","policy0.arbac","policy1.arbac","policy2.arbac","policy3.arbac","policy4.arbac","policy5.arbac","policy6.arbac","policy7.arbac","policy8.arbac","results"],"longSearchIndex":["arbacverifier","object","arbacverifier#apply_role_assignment()","arbacverifier#apply_role_revocation()","arbacverifier#backward_slicing()","arbacverifier#compute_reachability()","arbacverifier#forward_slicing()","arbacverifier#parse_arbac_file()","","","","","","","","","","",""],"info":[["ArbacVerifier","","ArbacVerifier.html","","<p>Collection of utilities to manipulate .arbac files (defining an ARBAC role reachability problem) to parse …\n"],["Object","","Object.html","",""],["apply_role_assignment","ArbacVerifier","ArbacVerifier.html#method-i-apply_role_assignment","(state, target, assignment_rule)","<p>Given a current state, a target user and an assignment rule, computes the rule application result state …\n"],["apply_role_revocation","ArbacVerifier","ArbacVerifier.html#method-i-apply_role_revocation","(state, target, revocation_rule)","<p>Given a current state, a target user and an revocation rule, computes the rule application result state …\n"],["backward_slicing","ArbacVerifier","ArbacVerifier.html#method-i-backward_slicing","(original_policy)","<p>Compute the backward slicing algorithm within a given policy in order to make the latter smaller and …\n"],["compute_reachability","ArbacVerifier","ArbacVerifier.html#method-i-compute_reachability","(policy)","<p>Computes the solution of the role reachability problem for the given policy and target\n<p>policy &mdash; The hash …\n\n"],["forward_slicing","ArbacVerifier","ArbacVerifier.html#method-i-forward_slicing","(original_policy)","<p>Compute the forward slicing algorithm within a given policy in order to make the latter smaller and easier …\n"],["parse_arbac_file","ArbacVerifier","ArbacVerifier.html#method-i-parse_arbac_file","(path)","<p>Parse a given and properly formatted arbac file into an easily usable hash\n<p>path &mdash; The absolute path of the …\n\n"],["README","","README_md.html","","<p>arbac_verifier\n<p>Program written in ruby to verify some simple istances of the arbac role reachability problem …\n"],["policy0.arbac","","policies/policy0_arbac.html","","<p>Roles Teacher Student TA ; Users stefano alice bob ; UA &lt;stefano,Teacher&gt; &lt;alice,TA&gt; ; CR …\n"],["policy1.arbac","","policies/policy1_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy2.arbac","","policies/policy2_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy3.arbac","","policies/policy3_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy4.arbac","","policies/policy4_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy5.arbac","","policies/policy5_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy6.arbac","","policies/policy6_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy7.arbac","","policies/policy7_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["policy8.arbac","","policies/policy8_arbac.html","","<p>Roles Agent Doctor Employee Manager MedicalManager MedicalTeam Nurse Patient PatientWithTPC PrimaryDoctor …\n"],["results","","results.html","","<p>policy1.arbac –&gt; 1 policy2.arbac –&gt; 0 policy3.arbac –&gt; 1 policy4.arbac –&gt; 1 policy5.arbac …\n"]]}}